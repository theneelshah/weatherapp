[{"D:\\Projects\\WeatherApp\\weatherapp\\src\\index.js":"1","D:\\Projects\\WeatherApp\\weatherapp\\src\\App.js":"2","D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\input.jsx":"3","D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\Days.jsx":"4","D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\prediction.jsx":"5","D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\suggestions.jsx":"6"},{"size":432,"mtime":1610099727250,"results":"7","hashOfConfig":"8"},{"size":7809,"mtime":1611258298024,"results":"9","hashOfConfig":"8"},{"size":1786,"mtime":1611313724968,"results":"10","hashOfConfig":"8"},{"size":2906,"mtime":1611313639054,"results":"11","hashOfConfig":"8"},{"size":8693,"mtime":1611313359522,"results":"12","hashOfConfig":"8"},{"size":4190,"mtime":1611299387838,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1oj8xuf",{"filePath":"17","messages":"18","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"D:\\Projects\\WeatherApp\\weatherapp\\src\\index.js",[],["29","30"],"D:\\Projects\\WeatherApp\\weatherapp\\src\\App.js",["31","32","33","34","35","36","37","38"],"import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport Days from \"./components/Days\";\nimport Input from \"./components/input\";\nimport Prediction from \"./components/prediction\";\n\nconst cities = [\n  { city: \"mumbai\", country: \"in\", displayName: \"Mumbai, Maharashtra\" },\n  { city: \"delhi\", country: \"in\", displayName: \"Delhi, New Delhi\" },\n  { city: \"dehradun\", country: \"in\", displayName: \"Dehradun, Uttrakhand\" },\n  { city: \"ahmedabad\", country: \"in\", displayName: \"Ahmedabad, Gujarat\" },\n  { city: \"indore\", country: \"in\", displayName: \"Indore, MP\" },\n  { city: \"amritsar\", country: \"in\", displayName: \"Amritsar, Punjab\" },\n  { city: \"lahore\", country: \"pk\", displayName: \"Lahore, Pakistan\" },\n  { city: \"karachi\", country: \"pk\", displayName: \"Karachi, Pakistan\" },\n  { city: \"kabul\", country: \"af\", displayName: \"Kabul, Afghanistan\" },\n  { city: \"tehran\", country: \"ir\", displayName: \"Tehran, Iran\" },\n  { city: \"istanbul\", country: \"tr\", displayName: \"Istanbul, Turkey\" },\n];\n\nclass App extends Component {\n  state = {\n    search: \"\",\n    lat: 0,\n    lng: 0,\n    data: {\n      weather: {},\n      sun: { sunrise: \"\", sunset: \"\" },\n      main: { pressure: \"\", humidity: \"\", temp: \"\" },\n    },\n    days: {\n      today: { dt: [], temp: [] },\n      tomorrow: { dt: [], temp: [] },\n      next: { dt: [], temp: [] },\n    },\n    current: 0,\n    dayWise: [],\n    humidity: [],\n    pressure: [],\n    sun: [],\n    temp: [],\n    icon: [],\n  };\n\n  getDayName = (dayNum) => {\n    var days = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n    var dayName = days[dayNum];\n    return dayName;\n  };\n\n  changeCurrent = (current) => {\n    this.setState({ current });\n  };\n\n  get12Hours = (timestamp) => {\n    const h = new Date(timestamp * 1000).getHours();\n    if (h < 12) return `${h} AM`;\n    else if (h === 12) return `12 PM`;\n    else return `${h % 12} PM`;\n  };\n\n  setHours = (data) => {\n    const { current, hourly, lat, lon } = data;\n    let today = { dt: [], temp: [] },\n      tomorrow = { dt: [], temp: [] },\n      next = { dt: [], temp: [] };\n    let c = new Date(hourly[0].dt * 1000).getDay();\n\n    for (let i = 0; i < hourly.length; i += 1) {\n      const d = new Date(hourly[i].dt * 1000);\n      const day = d.getDay();\n      if (c === day) {\n        today.temp.push(Math.round(hourly[i].temp));\n        today.dt.push(this.get12Hours(hourly[i].dt));\n      } else if (day === (c + 1) % 7) {\n        tomorrow.temp.push(Math.round(hourly[i].temp));\n        tomorrow.dt.push(this.get12Hours(hourly[i].dt));\n      } else {\n        next.temp.push(Math.round(hourly[i].temp));\n        next.dt.push(this.get12Hours(hourly[i].dt));\n      }\n    }\n\n    // if (today.length < 24) {\n    //   let len = today.length;\n    //   while (len < 24) {\n    //     today.unshift(25.0);\n    //     len += 1;\n    //   }\n    // }\n\n    // if (next.length < 24) {\n    //   let len = next.length;\n    //   while (len < 24) {\n    //     next.push(25.0);\n    //     len += 1;\n    //   }\n    // }\n\n    this.setState({ days: { today, tomorrow, next } });\n  };\n\n  setDays = (data) => {\n    const { current, daily, lat, lon } = data;\n\n    const dayWise = [];\n\n    let humidity = [],\n      pressure = [],\n      temperature = [],\n      icon = [],\n      sun = [];\n\n    for (let i = 0; i < 7; i += 1) {\n      humidity.push(daily[i].humidity);\n      pressure.push(daily[i].pressure);\n      temperature.push(daily[i].temp.day);\n      icon.push(daily[i].weather[0].icon);\n      sun.push({ sunrise: daily[i].sunrise, sunset: daily[i].sunset });\n\n      const { dt, temp, weather } = daily[i];\n      const dayNum = new Date(dt * 1000).getDay();\n      const dayName = this.getDayName(dayNum);\n\n      const t = {\n        day: dayName,\n        temp: { min: temp.min, max: temp.max },\n        weather: weather[0],\n      };\n      dayWise.push(t);\n    }\n    this.setState({\n      dayWise,\n      humidity,\n      pressure,\n      temp: temperature,\n      icon,\n      sun,\n    });\n  };\n\n  componentDidMount() {\n    const setPosition = (position) => {\n      const { latitude, longitude } = position.coords;\n      this.setState({ lat: latitude, lng: longitude }, async () => {\n        const { lat, lng } = this.state;\n        const response = await axios.get(\n          `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=metric&appid=2931c7a76e100f0f4f9ca58f62c24737`\n        );\n        const { data } = response;\n        const { name, main, sys, weather, clouds } = data;\n        this.setState(\n          {\n            search: name,\n            data: {\n              weather: weather[0],\n              sun: {\n                sunrise: sys.sunrise,\n                sunset: sys.sunset,\n              },\n              main: {\n                pressure: main.pressure,\n                humidity: main.humidity,\n                temp: main.temp,\n              },\n            },\n          },\n          async () => {\n            const { lat, lng } = this.state;\n\n            const response = await axios.get(\n              `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&units=metric&exclude=minutely&appid=2931c7a76e100f0f4f9ca58f62c24737`\n            );\n            const { data } = response;\n            this.setHours(data);\n            this.setDays(data);\n          }\n        );\n      });\n    };\n\n    navigator.geolocation.getCurrentPosition(setPosition);\n  }\n\n  onChange = (search) => {\n    this.setState({ search });\n  };\n\n  onSearchClick = (el) => {\n    console.log(el.city);\n    this.setState({ search: el.displayName }, async () => {\n      const response = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${el.city}&units=metric&appid=2931c7a76e100f0f4f9ca58f62c24737`\n      );\n      const { data } = response;\n      console.log(data);\n      const { name, main, sys, weather, coord } = data;\n      const { lat, lon } = coord;\n      this.setState(\n        {\n          lat,\n          lng: lon,\n          data: {\n            weather: weather[0],\n            sun: {\n              sunrise: sys.sunrise,\n              sunset: sys.sunset,\n            },\n            main: {\n              pressure: main.pressure,\n              humidity: main.humidity,\n              temp: main.temp,\n            },\n          },\n        },\n        async () => {\n          const { lat, lng } = this.state;\n\n          const response = await axios.get(\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&units=metric&exclude=minutely&appid=2931c7a76e100f0f4f9ca58f62c24737`\n          );\n          const { data } = response;\n          this.setHours(data);\n          this.setDays(data);\n        }\n      );\n    });\n  };\n\n  render() {\n    const {\n      search,\n      days,\n      current,\n      dayWise,\n      humidity,\n      pressure,\n      temp,\n      icon,\n      sun,\n    } = this.state;\n    const mainIcon = this.state.data.weather.icon;\n    // console.log(weather);\n    let data = [];\n    if (current === 0) data = days.today;\n    else if (current === 1) data = days.tomorrow;\n    else data = days.next;\n    // console.log(data);\n\n    const label = data.dt.slice(0, 16);\n    // console.log(label);\n\n    return (\n      <div className=\"App\">\n        <Input\n          search={search}\n          onSearchChange={this.onChange}\n          cities={cities}\n          onSearchClick={this.onSearchClick}\n        />\n\n        <Days\n          days={dayWise}\n          currentSelected={current}\n          changeCurrent={this.changeCurrent}\n        />\n\n        <Prediction\n          mainIcon={mainIcon}\n          sun={sun}\n          temp={temp}\n          icon={icon}\n          humidity={humidity}\n          pressure={pressure}\n          days={days}\n          current={current}\n          data={data}\n          label={label}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\input.jsx",["39"],"D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\Days.jsx",[],"D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\prediction.jsx",["40","41"],"D:\\Projects\\WeatherApp\\weatherapp\\src\\components\\suggestions.jsx",["42"],"import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { BeatLoader } from \"react-spinners\";\nimport styled from \"styled-components\";\n\nconst Cities = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 2;\n  top: 100%;\n  width: 100%;\n  background: white;\n  /* box-shadow: 0px 0px 10px 2px rgba(0, 0, 0, 0.2); */\n  border-radius: 5px;\n`;\n\nconst C = styled.div`\n  display: flex;\n  box-sizing: border-box;\n  justify-content: space-between;\n  cursor: pointer;\n  border: 1px solid #e3e3e3;\n  padding: 10px;\n\n  &:nth-child(1) {\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n  }\n\n  &:nth-last-child(1) {\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n  }\n  p {\n    margin: 0;\n  }\n\n  .name,\n  .main-separation {\n    flex: 1;\n  }\n\n  .name {\n    display: flex;\n    align-items: center;\n    p {\n      text-transform: capitalize;\n      span {\n        font-weight: bold;\n      }\n    }\n  }\n\n  .main-separation {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    div {\n      text-align: center;\n      .temp {\n        font-size: 20px;\n        font-weight: bold;\n      }\n      .desc {\n        font-size: 15px;\n        text-transform: capitalize;\n      }\n    }\n\n    .icon {\n      width: 100px;\n      height: 100px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  }\n\n  @media only screen and (max-width: 991px) {\n    padding: 10px 20px;\n\n    .main-separation {\n      div {\n        text-align: right;\n\n        .temp {\n          font-size: 15px;\n        }\n        .desc {\n          font-size: 12px;\n        }\n      }\n      .icon {\n        width: 65px;\n        height: 65px;\n        img {\n          width: 100%;\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\nclass City extends Component {\n  state = { icon: \"\", temp: \"\", desc: \"\" };\n\n  async componentDidMount() {\n    const { el } = this.props;\n    const { city } = el;\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=2931c7a76e100f0f4f9ca58f62c24737`\n    );\n    const { temp } = response.data.main;\n    const { description, icon } = response.data.weather[0];\n    this.setState({ temp, desc: description, icon });\n  }\n\n  render() {\n    const { el, onSearchClick, text, span } = this.props;\n    const { temp, desc, icon } = this.state;\n    console.log(temp);\n\n    return (\n      <C\n        onClick={() => {\n          onSearchClick(el);\n        }}\n      >\n        <div className=\"name\">\n          <p>\n            <span>{span}</span>\n            {text}\n          </p>\n        </div>\n\n        <div className=\"main-separation\">\n          <div>\n            <p className=\"temp\">\n              {temp || desc ? (\n                `${temp}°C`\n              ) : (\n                <BeatLoader color=\"#8f8f8f\" size={7} />\n              )}\n            </p>\n            <p className=\"desc\">{desc}</p>\n          </div>\n\n          <div className=\"icon\">\n            {icon ? (\n              <img\n                src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n                alt=\"\"\n              />\n            ) : (\n              <BeatLoader color=\"#8f8f8f\" size={10} />\n            )}\n          </div>\n        </div>\n      </C>\n    );\n  }\n}\n\nexport default class Suggestions extends Component {\n  getCityData = () => {};\n\n  render() {\n    const { cities, search, onSearchClick } = this.props;\n    return (\n      <Cities>\n        {cities.map((el, i) => {\n          if (el.displayName.toLowerCase() === search.toLowerCase())\n            return <></>;\n          if (\n            el.displayName.toLowerCase().startsWith(search.toLowerCase()) &&\n            search !== \"\"\n          ) {\n            const span = search;\n            const rest = el.displayName\n              .toLowerCase()\n              .replace(search.toLowerCase(), ``);\n\n            return (\n              <City\n                el={el}\n                i={i}\n                key={i}\n                onSearchClick={onSearchClick}\n                span={span}\n                text={rest}\n              />\n            );\n          }\n        })}\n      </Cities>\n    );\n  }\n}\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":63,"column":13,"nodeType":"49","messageId":"50","endLine":63,"endColumn":20},{"ruleId":"47","severity":1,"message":"51","line":63,"column":30,"nodeType":"49","messageId":"50","endLine":63,"endColumn":33},{"ruleId":"47","severity":1,"message":"52","line":63,"column":35,"nodeType":"49","messageId":"50","endLine":63,"endColumn":38},{"ruleId":"47","severity":1,"message":"48","line":104,"column":13,"nodeType":"49","messageId":"50","endLine":104,"endColumn":20},{"ruleId":"47","severity":1,"message":"51","line":104,"column":29,"nodeType":"49","messageId":"50","endLine":104,"endColumn":32},{"ruleId":"47","severity":1,"message":"52","line":104,"column":34,"nodeType":"49","messageId":"50","endLine":104,"endColumn":37},{"ruleId":"47","severity":1,"message":"53","line":151,"column":43,"nodeType":"49","messageId":"50","endLine":151,"endColumn":49},{"ruleId":"47","severity":1,"message":"54","line":197,"column":15,"nodeType":"49","messageId":"50","endLine":197,"endColumn":19},{"ruleId":"47","severity":1,"message":"55","line":60,"column":13,"nodeType":"49","messageId":"50","endLine":60,"endColumn":18},{"ruleId":"47","severity":1,"message":"56","line":138,"column":13,"nodeType":"49","messageId":"50","endLine":138,"endColumn":17},{"ruleId":"47","severity":1,"message":"57","line":138,"column":19,"nodeType":"49","messageId":"50","endLine":138,"endColumn":24},{"ruleId":"58","severity":1,"message":"59","line":171,"column":29,"nodeType":"60","messageId":"61","endLine":171,"endColumn":31},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'current' is assigned a value but never used.","Identifier","unusedVar","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'clouds' is assigned a value but never used.","'name' is assigned a value but never used.","'focus' is assigned a value but never used.","'data' is assigned a value but never used.","'label' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]